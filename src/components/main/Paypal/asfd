import React, { useEffect, useState } from "react";
import { useSearchParams, useLocation, useNavigate } from "react-router-dom";
import axios from "axios";
import { notification, Spin, Button, Result } from 'antd';
import { jwtDecode } from "jwt-decode";

const OrderPage = () => {
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState("");
    const [membershipData, setMembershipData] = useState(null);
    const [error, setError] = useState(null);
 
    console.log("membershipData",membershipData);
    

    useEffect(() => {
        const paymentId = searchParams.get("paymentId");
        const token = searchParams.get("token");
        const PayerID = searchParams.get("PayerID");

        const completePayment = async () => {
            try {
                // Kiểm tra token
                const tokenData = localStorage.getItem("tokenData");
                if (!tokenData) {
                    notification.error({
                        message: 'Lỗi xác thực',
                        description: 'Vui lòng đăng nhập lại',
                    });
                    navigate('/login');
                    return;
                }
        
                const { access_token } = JSON.parse(tokenData);
                
                // 1. Hoàn tất thanh toán
                try {
                    const successResponse = await axios.post(
                        `http://localhost:8082/api/paypal/success?paymentId=${paymentId}&token=${token}&PayerID=${PayerID}`,
                        {},  // Empty object as body
                        {
                            headers: {
                                'Authorization': `Bearer ${access_token}`
                            }
                        }
                    );
                    console.log("Success API Response:", successResponse.data);
        
                } catch (successError) {
                    console.error("Success API Error:", successError);
                    throw new Error(successError.response?.data?.message || 'Lỗi xác nhận thanh toán');
                }
        
                // 2. Lấy thông tin membership
                try {
                    const membershipResponse = await axios.get(
                        `http://localhost:8082/api/paypal/getMembershipByPaymentId/${paymentId}`,
                        {
                            headers: {
                                'Authorization': `Bearer ${access_token}`
                            }
                        }
                    );
        
                    if (membershipResponse.data) {
                        setMembershipData(membershipResponse.data);
                        setMessage("Thanh toán thành công! Cảm ơn bạn đã sử dụng dịch vụ.");
                        notification.success({
                            message: 'Thanh toán thành công',
                            description: 'Gói dịch vụ của bạn đã được kích hoạt',
                        });
                    }
                } catch (membershipError) {
                    console.error("Membership API Error:", membershipError);
                    throw new Error(membershipError.response?.data?.message || 'Lỗi lấy thông tin gói dịch vụ');
                }
        
            } catch (error) {
                console.error("General Error:", error);
                setError(error.message);
                
                if (error.response?.status === 401) {
                    notification.error({
                        message: 'Lỗi xác thực',
                        description: 'Phiên đăng nhập đã hết hạn. Vui lòng đăng nhập lại.',
                    });
                    navigate('/login');
                } else {
                    notification.error({
                        message: 'Lỗi thanh toán',
                        description: error.message || 'Không thể hoàn tất thanh toán. Vui lòng thử lại.',
                    });
                }
            } finally {
                setLoading(false);
            }
        };

        if (paymentId && token && PayerID) {
            completePayment();
        } else {
            setError("Thông tin thanh toán không hợp lệ");
            setLoading(false);
        }
    }, [searchParams, navigate]);

    if (loading) {
        return (
            <div className="min-h-screen flex items-center justify-center">
                <div className="text-center">
                    <Spin size="large" />
                    <p className="mt-4 text-lg">Đang xử lý thanh toán, vui lòng đợi...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <Result
                status="error"
                title="Thanh toán thất bại"
                subTitle={error}
                extra={[
                    <Button type="primary" key="console" onClick={() => navigate('/packages')}>
                        Quay lại trang gói dịch vụ
                    </Button>
                ]}
            />
        );
    }

    return (
        <section className="min-h-screen bg-gray-50 py-12">
            <div className="max-w-3xl mx-auto px-4">
                <Result
                    status="success"
                    title="Thanh toán thành công!"
                    subTitle={message}
                />

                {membershipData && (
                    <div className="bg-white p-6 rounded-lg shadow-md mt-8">
                        <h2 className="text-xl font-semibold mb-4">Thông tin gói đã thanh toán</h2>
                        <div className="space-y-3">
                            <div className="flex justify-between items-center border-b pb-2">
                                <span className="font-medium">Tên gói:</span>
                                <span>{membershipData.body.packageName}</span>
                            </div>
                            <div className="flex justify-between items-center border-b pb-2">
                                <span className="font-medium">Giá:</span>
                                <span>{membershipData.body.totalAmount?.toLocaleString('vi-VN')} VND</span>
                            </div>
                            <div className="flex justify-between items-center border-b pb-2">
                                <span className="font-medium">Trạng thái:</span>
                                <span className="text-green-600">{membershipData.body.status}</span>
                            </div>
                            <div className="flex justify-between items-center border-b pb-2">
                                <span className="font-medium">Ngày bắt đầu:</span>
                                <span>{new Date(membershipData.body.startDate).toLocaleDateString('vi-VN')}</span>
                            </div>
                            <div className="flex justify-between items-center border-b pb-2">
                                <span className="font-medium">Ngày kết thúc:</span>
                                <span>{new Date(membershipData.body.endDate).toLocaleDateString('vi-VN')}</span>
                            </div>
                            <div className="pt-2">
                                <span className="font-medium">Mô tả:</span>
                                <p className="mt-1 text-gray-600">{membershipData.body.description}</p>
                            </div>
                        </div>
                    </div>
                )}

                <div className="mt-8 text-center">
                    <Button 
                        type="primary" 
                        size="large"
                        onClick={() => navigate('/dashboard')}
                    >
                        Đi đến trang quản lý
                    </Button>
                </div>
            </div>
        </section>
    );
};

export default OrderPage;